name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 8 * * *'

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DoozyX/clang-format-lint-action@v0.15
      with:
        source: '.'
  build-linux:
    strategy:
      matrix:
        build_type: [DEBUG, RELEASE]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ github.job }}-${{ matrix.build_type }}
        max-size: 2G
    - name: Build
      run: |
            cmake -S . -B build \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DOPENCV_PATH=3rdparty/opencv/build
            cmake --build build --parallel
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
    - name: Prepare OpenCV libs
      run: |
       mkdir -p build/bin/opencv_libs
       cp -P 3rdparty/opencv/build/lib/libopencv_*so* build/bin/opencv_libs/
       # Создаём скрипт для настройки переменных окружения
       echo 'export LD_LIBRARY_PATH=$PWD/build/bin/opencv_libs:$LD_LIBRARY_PATH' > build/setenv.sh
       chmod +x build/setenv.sh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
       name: mnist-${{ matrix.build_type }}
       path: |
        build/bin/ACC_MNIST*
        build/bin/opencv_libs/*
        build/setenv.sh
    - name: Test
      run: cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
    - name: Test (valgrind)
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        valgrind cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
  build-linux-clang:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install prerequisites
      run: |
        sudo apt install clang libomp-dev
    - name: Download and extract TensorFlow
      run: |
        wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
        tar -xzvf libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
    - name: Set TensorFlow environment variables
      run: |
        echo "TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.so" >> $GITHUB_ENV
        echo "export TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "export TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.so" >> $GITHUB_ENV
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ github.job }}
    - name: Build
      run: |
        cmake -S . -B build \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DTensorFlow_INCLUDE_DIRS=${{ env.TensorFlow_INCLUDE_DIRS }} -DTensorFlow_LIBRARIES=${{ env.TensorFlow_LIBRARIES }}
        cmake --build build --parallel
    - name: Test
      run: cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
    - name: Test (valgrind)
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        valgrind cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install prerequisites
      run: |
        brew install libomp
        brew link libomp --overwrite --force
    - name: Download and extract TensorFlow
      run: |
        curl -O https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-darwin-x86_64-2.7.0.tar.gz
        tar -xzvf libtensorflow-cpu-darwin-x86_64-2.7.0.tar.gz
    - name: Set TensorFlow environment variables
      run: |
        echo "TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.dylib" >> $GITHUB_ENV
        echo "export TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "export TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.dylib" >> $GITHUB_ENV
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ github.job }}
    - name: Build
      run: |
        cmake -S . -B build \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_FLAGS="-I$(brew --prefix libomp)/include" \
          -DCMAKE_CXX_FLAGS="-I$(brew --prefix libomp)/include" -DTensorFlow_INCLUDE_DIRS=$TensorFlow_INCLUDE_DIRS -DTensorFlow_LIBRARIES=$TensorFlow_LIBRARIES
        cmake --build build --parallel
    - name: Test
      run: cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Download and extract TensorFlow
      run: |
        curl -O https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-windows-x86_64-2.7.0.zip
        Expand-Archive -Path libtensorflow-cpu-windows-x86_64-2.7.0.zip -DestinationPath 3rdparty/tensorflow
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ github.job }}
        max-size: 2G
        variant: sccache
    - name: Build
      run: |
        cmake -S . -B build -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
        cmake --build build --parallel
    - name: Test
      run: |
        cd build
        ctest --output-on-failure
  codecov:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y gcovr
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Download and extract TensorFlow
      run: |
        wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
        tar -xzvf libtensorflow-cpu-linux-x86_64-2.7.0.tar.gz
    - name: Set TensorFlow environment variables
      run: |
        echo "TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.so" >> $GITHUB_ENV
        echo "export TensorFlow_INCLUDE_DIRS=${PWD}/include" >> $GITHUB_ENV
        echo "export TensorFlow_LIBRARIES=${PWD}/lib/libtensorflow.so" >> $GITHUB_ENV
    - name: Display TensorFlow environment variables
      run: |
        echo "TensorFlow_INCLUDE_DIRS: ${{ env.TensorFlow_INCLUDE_DIRS }}"
        echo "TensorFlow_LIBRARIES: ${{ env.TensorFlow_LIBRARIES }}"
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ github.job }}-${{ matrix.build_type }}
        max-size: 2G
    - name: Build
      run: |
        cmake -S . -B build \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_FLAGS="--coverage" \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DTensorFlow_INCLUDE_DIRS=${{ env.TensorFlow_INCLUDE_DIRS }} \
          -DTensorFlow_LIBRARIES=${{ env.TensorFlow_LIBRARIES }}
        cmake --build build --parallel
    - name: Test
      run: cmake --build build -t test
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
    - name: Generate Coverage Data
      run: gcovr -r . --xml -o coverage.xml --gcov-ignore-parse-errors
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: embedded-dev-research/itlab_2023
  evaluate-model:
   runs-on: ubuntu-latest
   needs: [build-linux]
   permissions:
    contents: write

   steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Важно для git push!

    - name: Download binary and libs
      uses: actions/download-artifact@v4
      with:
        name: mnist-RELEASE
        path: build/
    - name: Verify downloaded files
      run: |
       echo "Contents of build/:"
       ls -la build/
       echo "OpenCV libs:"
       ls -la build/bin/opencv_libs/
       [ -f build/setenv.sh ] || (echo "setenv.sh not found!" && exit 1)
    - name: Install runtime dependencies
      run: |
       sudo apt-get update
       sudo apt-get install -y libgtk-3-0 libtbb12

    - name: Prepare environment
      run: |
        # Даём права на выполнение
        chmod +x build/bin/ACC_MNIST*
        
        # Проверяем права
        ls -la build/bin/ACC_MNIST*
        
        # Устанавливаем пути
        export LD_LIBRARY_PATH=$PWD/build/bin/opencv_libs:$LD_LIBRARY_PATH
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Run evaluation
      run: |
       # Явно устанавливаем пути
       export LD_LIBRARY_PATH=$PWD/build/bin/opencv_libs:$LD_LIBRARY_PATH
    
       # Альтернатива: используем setenv.sh если он есть
       if [ -f build/setenv.sh ]; then
       source build/setenv.sh
       fi
    
       echo "Final LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
       
       ldd build/bin/ACC_MNIST* || true
       ./build/bin/ACC_MNIST* > accuracy.txt

    - name: Update README
      run: |
        ACCURACY=$(cat accuracy.txt)
        DATE=$(date '+%Y-%m-%d')
        sed -i "s/<!--ACCURACY_PLACEHOLDER-->.*<!--END_ACCURACY-->/<!--ACCURACY_PLACEHOLDER-->${ACCURACY}% (updated: ${DATE})<!--END_ACCURACY-->/" README.md

    - name: Commit changes
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add README.md
        git commit -m "[CI] Update accuracy: $(cat accuracy.txt)%"
        git pull --rebase origin main
        git push
